import fs from "fs-extra";
import child_process from "child_process";
import path from "path";
import {createHardhatConfig} from "./createHardhatConfig";
import {forceMkdir} from "../fs";

export const createHardhatProject = ({
  compilerVersion,
  hardhatProjectPath,
}: {
  readonly compilerVersion?: string;
  readonly hardhatProjectPath: string;
}) => {
  forceMkdir({dir: hardhatProjectPath});

  const testDir = path.resolve(hardhatProjectPath, 'test');
  const contractsDir = path.resolve(hardhatProjectPath, 'contracts');

  fs.mkdirSync(testDir);
  fs.mkdirSync(contractsDir);

  child_process.execSync(
    'npm i --save-dev @nomicfoundation/hardhat-toolbox@^1.0.2 hardhat@^2.0.1 dotenv hardhat-copy @openzeppelin/contracts',
    {stdio: 'inherit', cwd: hardhatProjectPath},
  );

  fs.writeFileSync(
    path.resolve(hardhatProjectPath, '.gitignore'),
    `
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env*

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

node_modules
.env
coverage
coverage.json
typechain
typechain-types

#Hardhat files
cache
artifacts

#Lockfiles
yarn.lock

#WebStorm
.idea/
      `.trim(),
    );

  fs.writeFileSync(
    path.resolve(hardhatProjectPath, '.npmignore'),
    `.env*`,
  );

  fs.writeFileSync(
    path.resolve(hardhatProjectPath, '.env'),
    `
# Please use your own key!
ETHERSCAN_KEY="DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW"
`.trim(),
  );

  fs.writeFileSync(
    path.resolve(hardhatProjectPath, 'tsconfig.json'),
    `
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true
  }
}
    `.trim(),
  );

  createHardhatConfig({
    compilerVersion,
    projectDir: hardhatProjectPath,
  });

  return {testDir, contractsDir};
};